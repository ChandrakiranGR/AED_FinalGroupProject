/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.BloodBankRole;

import Business.WorkQueue.BloodRequestWorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author antaradeshmukh
 */
public class ViewRequests extends javax.swing.JPanel {

      private List<BloodRequestWorkRequest> requestList = new ArrayList<>();
    private JPanel userProcessContainer;

    // Constructor without requestList
    public ViewRequests(JPanel userProcessContainer) {
        this.userProcessContainer = userProcessContainer;
        initComponents();
        loadRequests();  // Load the dummy requests
        populateTable();  // Populate the table on initialization
    }
     private void loadRequests() {
        // Clear any existing data in the request list
        requestList.clear();

        // Adding 10 dummy requests
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            for (int i = 1; i <= 10; i++) {
                requestList.add(new BloodRequestWorkRequest(String.valueOf(i), "BloodType" + i, "Pending", dateFormat.format(System.currentTimeMillis())));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        populateTable();  // Refresh the table to show the dummy requests
    }

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequests = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        btnReview = new javax.swing.JButton();

        setLayout(new java.awt.CardLayout());

        tblRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request ID", "Blood Type", "Status", "Date"
            }
        ));
        jScrollPane1.setViewportView(tblRequests);

        btnAccept.setText("Accept");

        btnReview.setText("Review");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(187, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAccept)
                    .addComponent(btnReview))
                .addGap(112, 112, 112))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnReview)
                        .addGap(68, 68, 68)
                        .addComponent(btnAccept)
                        .addGap(112, 112, 112))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );

        add(jPanel1, "card2");
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnReview;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRequests;
    // End of variables declaration//GEN-END:variables

     private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
        model.setRowCount(0);  // Clear any existing rows in the table

        // Add rows from the requestList to the table
        for (BloodRequestWorkRequest request : requestList) {
            Object[] row = new Object[4];
            row[0] = request.getRequestId();
            row[1] = request.getBloodType();
            row[2] = request.getStatus();
            row[3] = request.getDate();
            model.addRow(row);
        }
    }

    // Action to accept a request
    private void acceptRequest() {
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow >= 0) {
            BloodRequestWorkRequest request = requestList.get(selectedRow);
            request.setStatus("Accepted");  // Update status to Accepted
            populateTable();  // Refresh the table to reflect the changes
        } else {
            JOptionPane.showMessageDialog(this, "Please select a request to accept.");
        }
    }

    // This method is called when the user clicks the "Review" button
    private void reviewRequest() {
        int selectedRow = tblRequests.getSelectedRow();
        if (selectedRow >= 0) {
            BloodRequestWorkRequest request = requestList.get(selectedRow);
            // Handle the review logic (e.g., show details or allow editing)
        } else {
            JOptionPane.showMessageDialog(this, "Please select a request to review.");
        }
    }

//     public void addNewRequest(int requestId, String bloodType, Date requestDate) {
//        // Add new blood request to the list
//        BloodRequestWorkRequest newRequest = new BloodRequestWorkRequest(bloodType, "Pending", "Pending", requestDate);
//        requestList.add(newRequest);
//
//        updateTable();  // Refresh the table with new request
//    }

//   private void populateTable() {
//        DefaultTableModel model = (DefaultTableModel) tblRequests.getModel();
//        model.setRowCount(0);  // Clear existing rows
//
//        // Add rows from the requestList to the table
//        for (BloodRequestWorkRequest request : requestList) {
//            Object[] row = new Object[4];
//            row[0] = request.getRequestId();
//            row[1] = request.getBloodType();
//            row[2] = request.getStatus();
//            row[3] = request.getDate();
//            model.addRow(row);
//        }
//    }
}

